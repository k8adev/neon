$padding = rem-calc(10);
$margin = rem-calc(15);
$border-radius = rem-calc(50);

$gutter = {
  small: (rem-calc(20) / 2),
  medium: (rem-calc(17) / 2),
  large: (rem-calc(17) / 2)
}

$breakpoints = {
  small: 0rem,
  medium: rem-calc(640),
  large: rem-calc(1366)
}

breakpoint($breakpoint) {
  if match('small|medium|large', $breakpoint) {
    @media screen and (min-width: $breakpoints[$breakpoint]) {
      {block}
    }
  }
  else {
    @media $breakpoint {
      {block}
    }
  }
}

body {
  max-width: 100%;
}

.grid {
  min-width: 100%;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  min-height: inherit;
  height: inherit;

  +breakpoint(large) {
    min-width: auto;
    max-width: $breakpoints.large;
  }

  &.middle {
    align-items: center;
  }

  &.justify {
    justify-content: space-between;
  }
}

.column {
  padding-left: $gutter.small;
  padding-right: $gutter.small;
  max-width: 100%;

  +breakpoint(large) {
    padding-left: $gutter.large;
    padding-right: @padding-left;
  }

  &.shrink {
    flex: 0 0 auto;
  }

  &.expand {
    flex: 1 1 100%;
  }

  &.large-shrink {
    +breakpoint(large) {
      flex: 0 0 auto;
    }
  }

  &.collapse {
    padding-left: 0;
    padding-right: @padding-left;
  }

  &.large-uncollapse {
    +breakpoint(large) {
      padding-left: $gutter.large;
      padding-right: @padding-left;
    }
  }

  for $i in 1..3 {
    &.large-order-{$i} {
      +breakpoint(large) {
        order: $i;
      }
    }
  }
}
